// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MythTechTest.Data;

#nullable disable

namespace MythTechTest.Migrations
{
    [DbContext(typeof(SportsEventContext))]
    partial class SportsEventContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MythTechTest.Models.Entities.EventMeta", b =>
                {
                    b.Property<string>("SportsEventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdateId")
                        .HasColumnType("bigint");

                    b.HasKey("SportsEventId");

                    b.ToTable("EventMetas");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.EventState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportsEventId");

                    b.ToTable("EventStates");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.ParentEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ParentEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SportsEventId");

                    b.ToTable("ParentEvents");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.RelatedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Depth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDetail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportsEventId");

                    b.ToTable("RelatedEvents");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.SportsEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Attendance")
                        .HasColumnType("int");

                    b.Property<string>("AwayParticipantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectParentSportsEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeParticipantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipantType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledStartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VenueId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SportsEvents");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.SportsOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SportsEventId");

                    b.ToTable("SportsOrganizations");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.EventMeta", b =>
                {
                    b.HasOne("MythTechTest.Models.Entities.SportsEvent", "SportsEvent")
                        .WithOne("Meta")
                        .HasForeignKey("MythTechTest.Models.Entities.EventMeta", "SportsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsEvent");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.EventState", b =>
                {
                    b.HasOne("MythTechTest.Models.Entities.SportsEvent", "SportsEvent")
                        .WithMany("States")
                        .HasForeignKey("SportsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsEvent");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.ParentEvent", b =>
                {
                    b.HasOne("MythTechTest.Models.Entities.SportsEvent", "SportsEvent")
                        .WithMany("ParentEvents")
                        .HasForeignKey("SportsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsEvent");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.RelatedEvent", b =>
                {
                    b.HasOne("MythTechTest.Models.Entities.SportsEvent", "SportsEvent")
                        .WithMany("RelatedEvents")
                        .HasForeignKey("SportsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MythTechTest.Models.Entities.NavigationInfo", "NavigationInfo", b1 =>
                        {
                            b1.Property<int>("RelatedEventId")
                                .HasColumnType("int");

                            b1.Property<bool?>("HasStandings")
                                .HasColumnType("bit");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool?>("IsKnockout")
                                .HasColumnType("bit");

                            b1.HasKey("RelatedEventId");

                            b1.ToTable("RelatedEvents");

                            b1.WithOwner()
                                .HasForeignKey("RelatedEventId");
                        });

                    b.Navigation("NavigationInfo");

                    b.Navigation("SportsEvent");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.SportsOrganization", b =>
                {
                    b.HasOne("MythTechTest.Models.Entities.SportsEvent", "SportsEvent")
                        .WithMany("SportsOrganizations")
                        .HasForeignKey("SportsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsEvent");
                });

            modelBuilder.Entity("MythTechTest.Models.Entities.SportsEvent", b =>
                {
                    b.Navigation("Meta")
                        .IsRequired();

                    b.Navigation("ParentEvents");

                    b.Navigation("RelatedEvents");

                    b.Navigation("SportsOrganizations");

                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
